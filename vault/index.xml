<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vaults on</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/</link><description>Recent content in Vaults on</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><atom:link href="https://pedrocastellucci.github.io/notas-de-aula/vault/index.xml" rel="self" type="application/rss+xml"/><item><title>Análise de algoritmos</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/An%C3%A1lise-de-algoritmos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/An%C3%A1lise-de-algoritmos/</guid><description>Análise de algoritmos O que é complexidade computacional? A complexidade computacional de um algoritmo é uma medida da quantidade de recursos computacionais utilizados.</description></item><item><title>Branch-and-cut</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Branch-and-cut/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Branch-and-cut/</guid><description/></item><item><title>Eliminação de Gauss</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Elimina%C3%A7%C3%A3o-de-Gauss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Elimina%C3%A7%C3%A3o-de-Gauss/</guid><description>Eliminação de Gauss O método da eliminação de Gauss é um método eliminativo para a solução de sistemas lineares, $Ax = b$.</description></item><item><title>Enumeração de soluções</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Enumerando-solu%C3%A7%C3%B5es-explicitamente/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Enumerando-solu%C3%A7%C3%B5es-explicitamente/</guid><description> Algoritmo para enumeração de subconjuntos Algoritmo para enumeração de permutações Algoritmo para enumeração de subsequências</description></item><item><title>Enumeração implícita</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Enumera%C3%A7%C3%A3o-impl%C3%ADcita-de-solu%C3%A7%C3%B5es/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Enumera%C3%A7%C3%A3o-impl%C3%ADcita-de-solu%C3%A7%C3%B5es/</guid><description>A estratégia de [[Branch-and-bound]] A estratégia de [[vault/Otimização/Enumeração implícita de soluções|Branch-and-bound]] foi proposta originalmente em 1960 por [[Ailsa Land]] e [[Alison Doig]] como método para solução de problemas discretos de otimização.</description></item><item><title>Estruturas de dados para grafos</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Estruturas-de-dados-para-grafos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Estruturas-de-dados-para-grafos/</guid><description>Introdução Existem diversas formas de representar um grafo computacionalmente. Duas formas consideradas clássicas são (i) Lista de adjacências e (ii) Matriz de adjacências.</description></item><item><title>Grafos</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Grafos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Grafos/</guid><description>Introdução e definições Problemas envolvendo grafos emergem em diversas áreas da computação. Por isso, estruturas de dados e algoritmos para lidar com tais situações são fundamentais.</description></item><item><title>Modelagem para programas lineares inteiros</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Modelagem-para-programas-lineares-inteiros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Modelagem-para-programas-lineares-inteiros/</guid><description>Programas Lineares Inteiros Mistos $$\min c^Tx + h^Ty$$
sujeito a
$$Ax + Gy \leq b,$$ $$x \in \mathbb{Z}^n_+,$$ $$y^p \geq 0.</description></item><item><title>Método de Newton</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/M%C3%A9todo-de-Newton-para-equa%C3%A7%C3%B5es/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/M%C3%A9todo-de-Newton-para-equa%C3%A7%C3%B5es/</guid><description>O método de Newton (ou Newton-Raphson) Notas históricas Embora o nome do método seja derivado de Isaac Newton. A descrição do método que vamos estudar é substancialmente diferente do utilizado originalmente por Newton.</description></item><item><title>O problema do caixeiro viajante</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Problema-do-Caixeiro-Viajante/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Problema-do-Caixeiro-Viajante/</guid><description>O Problema do Caixeiro Viajante Um vendedor deseja visitar as cidades $0, 1, 2, \ldots, n-1$, partindo de uma delas.</description></item><item><title>Otimização combinatória</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/O-que-%C3%A9-otimiza%C3%A7%C3%A3o-combinat%C3%B3ria/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/O-que-%C3%A9-otimiza%C3%A7%C3%A3o-combinat%C3%B3ria/</guid><description>Introdução à otimização combinatória Problemas combinatórios consistem em encontrar um (ou vários) elementos de um conjunto que satisfaz (em) restrições pré-definidas.</description></item><item><title>Percursos em árvores</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Percursos-em-%C3%A1rvores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Percursos-em-%C3%A1rvores/</guid><description>Percursos em árvores As principais estratégias para se percorrer uma árvore são: percurso em pré-ordem, percurso em pós-ordem e percurso em largura.</description></item><item><title>Recursão</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Recurs%C3%A3o/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Recurs%C3%A3o/</guid><description>Introdução To iterate is human, to recurse is divine (Laurence Peter Deutsch)
Recursão é um conceito genérico presente em várias disciplinas e na própria natureza.</description></item><item><title>Sistemas lineares equivalentes</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Sistemas-lineares-equivalentes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Sistemas-lineares-equivalentes/</guid><description>Sistemas lineares equivalentes Seja $S$ um sistema linear com $m$ equações e $n$ incógnitas, $Ax = b$. Um sistema linear equivalente a $S$ é um sistema que pode ser obtido por meio da combinação das seguintes operações:</description></item><item><title>Torre de Hanoi</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Torre-de-Hanoi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Torre-de-Hanoi/</guid><description>O problema da Torre de Hanoi No grande templo de Benares, abaixo do domo que marca o centro do mundo, repousa uma placa de bronze em que estão fixados três pinos de diamante (&amp;hellip;).</description></item><item><title>Visão geral</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Vis%C3%A3o-geral-de-c%C3%A1lculo-num%C3%A9rico/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/calculo-numerico/Vis%C3%A3o-geral-de-c%C3%A1lculo-num%C3%A9rico/</guid><description> O que é Cálculo Numérico Solução de modelos matemáticos. A ordem das parcelas altera a soma [[Sistemas de numeração]] [[Conversões entre bases]] [[Números reais versus representação digital]] Solução de equações [[Método da bipartição]] [[Método da falsa-posição]] [[Método de Newton para equações]] [[Método das secantes]] [[Resolução de equações polinomais]] [[Método de Birge-Vietta]] [[Método de Müller]] Solução de sistemas de equações Sistemas lineares [[vault/calculo-numerico/Eliminação de Gauss]] [[Decomposição LU]] [[Método de Jacobi]] [[Método de Gauss-Seidel]] [[Técnicas de relaxação]] Sistemas não lineares [[Método de Newton para sistemas de equações]] [[Métodos de Quasi-Newton]] Resolução número de Equações Diferenciais [[Método de Euler]] [[Métodos de Runge-Kutta]] [[Sistemas de equações diferenciais]] Resolução numérica de integrais definidas [[Métodos de Newton-Côtes]] [[Métodos de Gauss-Legendre]] Ajustamento de curvas [[Método dos mínimos quadrados]] Interpolação polinomial [[Existência e unicidade do polinômio interpolador]] [[Método de Lagrange]] [[Método de Gregory-Newton]] [[Erros de truncamento em interpolação]] [[Splines cúbicas]] [[Octave]]</description></item><item><title>Visão geral</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Vis%C3%A3o-geral-de-estrutura-de-dados/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/Vis%C3%A3o-geral-de-estrutura-de-dados/</guid><description> [[Análise de algoritmos]] [[Recursão]] [[Tipo Abstrato de Dados]] [[Listas ligadas]] [[Pilhas]] [[Gerenciamento de memória]] [[Filas]] [[Tabelas de símbolos]] [[Tabelas hash]] [[Árvores]] [[vault/estrutura-dados/Percursos em árvores |Percursos em árvores]] [[vault/estrutura-dados/Árvores binárias |Árvores binárias]] [[Árvores binárias implementadas em vetor]] [[Heaps]] [[Árvores binárias de busca]] [[Árvores binárias de busca balanceadas]] [[Grafos]] [[Algoritmos de ordenação]] [[Organização de arquivos]] [[Árvores B]] e [[Árvores B+]]</description></item><item><title>Visão geral</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Vis%C3%A3o-geral-de-otimiza%C3%A7%C3%A3o/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/Otimiza%C3%A7%C3%A3o/Vis%C3%A3o-geral-de-otimiza%C3%A7%C3%A3o/</guid><description> [[O que é otimização combinatória]] Soluções para problemas de otimização combinatória [[Enumerando soluções explicitamente]] [[Enumeração implícita de soluções]] [[Modelagem para programas lineares inteiros]] Problemas clássicos de Programação Linear Inteira Mista Modelos de tamanho polinomial Implementação de modelos em pacotes computacionais Modelos de tamanho exponencial Geração de colunas Algoritmo Simplex Decomposição de Benders Avaliação de modelos de programação linear inteira Desigualdades válidas, algoritmos de planos de corte, Limitantes e relaxações Relaxação linear Relaxação surrogate Relaxação lagrangeana Relaxação combinatória [[Branch-and-bound]] como método para Programação Linear Inteira Soluções simétricas</description></item><item><title>Árvores</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores/</guid><description>Introdução Árvores são estruturas de dados não lineares. Uma organização não linear é mais rica do que uma organização linear, em que há uma relação simples de predecessor ou sucessor entre dois objetos no conjunto.</description></item><item><title>Árvores B</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-B/</guid><description>Árvores B Diversos sistemas de bancos de dados utilizam Árvores B (ou variantes) para armazenar as informaçẽos. Generalização de [[Árvores binárias de busca]].</description></item><item><title>Árvores binárias</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-bin%C3%A1rias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-bin%C3%A1rias/</guid><description>Árvores binárias [!CITE] (Goodrich et al, 2013) Um árvore binária é uma [[árvore]] ordenada em que:
Cada nó possui no máximo dois filhos.</description></item><item><title>Árvores binárias implementadas em vetor</title><link>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-bin%C3%A1rias-implementadas-em-vetor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pedrocastellucci.github.io/notas-de-aula/vault/estrutura-dados/%C3%81rvores-bin%C3%A1rias-implementadas-em-vetor/</guid><description>Implementaçao em vetor para árvores binárias Considere uma [[Árvores binárias#^f23f12|árvore binária completa]] com $n$ nós. Para uma implementação em vetor, assume-se que a raiz é colocada na posição $0$ do vetor, para cada posição $i = 1, \ldots, n-1$, tem-se:</description></item></channel></rss>